[{"D:\\web-dev\\react-crm\\admin\\src\\reportWebVitals.ts":"1","D:\\web-dev\\react-crm\\admin\\src\\store\\rootReducer.ts":"2","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\reducer.ts":"3","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\reducer.ts":"4","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\reducer.ts":"5","D:\\web-dev\\react-crm\\admin\\src\\components\\Header\\Header.tsx":"6","D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\AddCategoryPanel\\AddCategoryPanel.tsx":"7","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\actions.ts":"8","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\contracts\\types.ts":"9","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\contracts\\types.ts":"10","D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttributeTable.tsx":"11","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\contracts\\types.ts":"12","D:\\web-dev\\react-crm\\admin\\src\\components\\EditAttributePanel\\EditAttributePanel.tsx":"13","D:\\web-dev\\react-crm\\admin\\src\\theme.ts":"14","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\sagas.ts":"15","D:\\web-dev\\react-crm\\admin\\src\\appClasses.ts":"16","D:\\web-dev\\react-crm\\admin\\src\\components\\HOC\\PrivateRouter.tsx":"17","D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\Gallery.tsx":"18","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\actions.ts":"19","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\actions.ts":"20","D:\\web-dev\\react-crm\\admin\\src\\components\\DropLoader\\DropLoader.tsx":"21","D:\\web-dev\\react-crm\\admin\\src\\components\\Header\\headerClasses.ts":"22","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\reducer.ts":"23","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\actions.ts":"24","D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\Categories.tsx":"25","D:\\web-dev\\react-crm\\admin\\src\\screens\\Attribute\\Attribute.tsx":"26","D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\MediaCard.tsx":"27","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\sagas.ts":"28","D:\\web-dev\\react-crm\\admin\\src\\screens\\SignUp\\SignUp.tsx":"29","D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\GalleryEdit.tsx":"30","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\contracts\\types.ts":"31","D:\\web-dev\\react-crm\\admin\\src\\components\\SideBar\\SideBar.tsx":"32","D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\DisplayCategories\\DisplayCategories.tsx":"33","D:\\web-dev\\react-crm\\admin\\src\\App.tsx":"34","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\sagas.ts":"35","D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\GalleryInModal\\GalleryInModal.tsx":"36","D:\\web-dev\\react-crm\\admin\\src\\helpers\\arrayFormating.ts":"37","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\sagas.ts":"38","D:\\web-dev\\react-crm\\admin\\src\\store\\store.ts":"39","D:\\web-dev\\react-crm\\admin\\src\\screens\\Home\\Home.tsx":"40","D:\\web-dev\\react-crm\\admin\\src\\store\\types.ts":"41","D:\\web-dev\\react-crm\\admin\\src\\components\\UI-parts\\SuccessCheckBox.tsx":"42","D:\\web-dev\\react-crm\\admin\\src\\services\\api.js":"43","D:\\web-dev\\react-crm\\admin\\src\\components\\UI-parts\\DepthSearchSelect.tsx":"44","D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\selectors.ts":"45","D:\\web-dev\\react-crm\\admin\\src\\screens\\SigIn\\SignIn.tsx":"46","D:\\web-dev\\react-crm\\admin\\src\\store\\saga.ts":"47","D:\\web-dev\\react-crm\\admin\\src\\index.tsx":"48","D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTableHead.tsx":"49","D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTablePagination.tsx":"50","D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTableBody.tsx":"51","D:\\web-dev\\react-crm\\admin\\src\\helpers\\urlFormating.ts":"52","D:\\web-dev\\react-crm\\admin\\src\\helpers\\hooks.ts":"53","D:\\web-dev\\react-crm\\admin\\src\\screens\\Attribute\\EditAttribute.tsx":"54","D:\\web-dev\\react-crm\\admin\\src\\hooks\\redux.ts":"55"},{"size":425,"mtime":1609784087360,"results":"56","hashOfConfig":"57"},{"size":453,"mtime":1632770051955,"results":"58","hashOfConfig":"57"},{"size":1123,"mtime":1649589211174,"results":"59","hashOfConfig":"57"},{"size":1137,"mtime":1611684715317,"results":"60","hashOfConfig":"61"},{"size":2738,"mtime":1628702406506,"results":"62","hashOfConfig":"57"},{"size":4418,"mtime":1632760421200,"results":"63","hashOfConfig":"61"},{"size":24570,"mtime":1649824812404,"results":"64","hashOfConfig":"61"},{"size":3890,"mtime":1628702385672,"results":"65","hashOfConfig":"61"},{"size":1473,"mtime":1611681994412,"results":"66","hashOfConfig":"61"},{"size":4149,"mtime":1628702379386,"results":"67","hashOfConfig":"57"},{"size":13343,"mtime":1649606466572,"results":"68","hashOfConfig":"57"},{"size":1665,"mtime":1649456768380,"results":"69","hashOfConfig":"57"},{"size":3819,"mtime":1639924238680,"results":"70","hashOfConfig":"57"},{"size":177,"mtime":1639683120971,"results":"71","hashOfConfig":"61"},{"size":1137,"mtime":1649457087786,"results":"72","hashOfConfig":"61"},{"size":1228,"mtime":1632760421185,"results":"73","hashOfConfig":"57"},{"size":859,"mtime":1649516974839,"results":"74","hashOfConfig":"61"},{"size":7960,"mtime":1639929105110,"results":"75","hashOfConfig":"57"},{"size":1613,"mtime":1639918312197,"results":"76","hashOfConfig":"57"},{"size":1491,"mtime":1649457175196,"results":"77","hashOfConfig":"57"},{"size":6887,"mtime":1624562822913,"results":"78","hashOfConfig":"61"},{"size":2150,"mtime":1632760421212,"results":"79","hashOfConfig":"61"},{"size":2000,"mtime":1639918289017,"results":"80","hashOfConfig":"61"},{"size":1331,"mtime":1639417363691,"results":"81","hashOfConfig":"57"},{"size":1681,"mtime":1620048173844,"results":"82","hashOfConfig":"57"},{"size":192,"mtime":1649589533244,"results":"83","hashOfConfig":"61"},{"size":3723,"mtime":1625946552872,"results":"84","hashOfConfig":"61"},{"size":1933,"mtime":1635581720961,"results":"85","hashOfConfig":"57"},{"size":99,"mtime":1610790319141,"results":"86","hashOfConfig":"57"},{"size":9404,"mtime":1630840625669,"results":"87","hashOfConfig":"57"},{"size":2151,"mtime":1639918305005,"results":"88","hashOfConfig":"61"},{"size":2120,"mtime":1632761709617,"results":"89","hashOfConfig":"57"},{"size":8164,"mtime":1639922156377,"results":"90","hashOfConfig":"57"},{"size":5806,"mtime":1649606347420,"results":"91","hashOfConfig":"61"},{"size":3498,"mtime":1628702632058,"results":"92","hashOfConfig":"57"},{"size":1874,"mtime":1625990821967,"results":"93","hashOfConfig":"61"},{"size":946,"mtime":1639918867847,"results":"94","hashOfConfig":"61"},{"size":1581,"mtime":1639682029622,"results":"95","hashOfConfig":"61"},{"size":859,"mtime":1632850957576,"results":"96","hashOfConfig":"61"},{"size":5146,"mtime":1639777731240,"results":"97","hashOfConfig":"57"},{"size":142,"mtime":1611167577464,"results":"98","hashOfConfig":"61"},{"size":684,"mtime":1638897292097,"results":"99","hashOfConfig":"61"},{"size":2562,"mtime":1649506591746,"results":"100","hashOfConfig":"57"},{"size":12399,"mtime":1651314458753,"results":"101","hashOfConfig":"57"},{"size":183,"mtime":1611606309876,"results":"102","hashOfConfig":"61"},{"size":3372,"mtime":1624563135144,"results":"103","hashOfConfig":"61"},{"size":385,"mtime":1632770028622,"results":"104","hashOfConfig":"57"},{"size":949,"mtime":1632760421214,"results":"105","hashOfConfig":"61"},{"size":1434,"mtime":1640119899071,"results":"106","hashOfConfig":"61"},{"size":3269,"mtime":1649521644723,"results":"107","hashOfConfig":"61"},{"size":3436,"mtime":1649590242939,"results":"108","hashOfConfig":"57"},{"size":1017,"mtime":1640203762734,"results":"109","hashOfConfig":"61"},{"size":225,"mtime":1649500330676,"results":"110","hashOfConfig":"57"},{"size":25946,"mtime":1651332634424,"results":"111","hashOfConfig":"57"},{"size":187,"mtime":1649603332800,"results":"112","hashOfConfig":"57"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"9qmcrm",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"w33plv",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"115"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"201"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"115"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\web-dev\\react-crm\\admin\\src\\reportWebVitals.ts",[],["237","238"],"D:\\web-dev\\react-crm\\admin\\src\\store\\rootReducer.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\reducer.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\reducer.ts",[],["239","240"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\reducer.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\Header\\Header.tsx",[],["241","242"],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\AddCategoryPanel\\AddCategoryPanel.tsx",[],["243","244"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\actions.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\contracts\\types.ts",[],["245","246"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\contracts\\types.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttributeTable.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\contracts\\types.ts",["247"],"D:\\web-dev\\react-crm\\admin\\src\\components\\EditAttributePanel\\EditAttributePanel.tsx",["248"],"D:\\web-dev\\react-crm\\admin\\src\\theme.ts",[],["249","250"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\sagas.ts",[],["251","252"],"D:\\web-dev\\react-crm\\admin\\src\\appClasses.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\HOC\\PrivateRouter.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\Gallery.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\actions.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\attribute\\actions.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\DropLoader\\DropLoader.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\Header\\headerClasses.ts",[],["253","254"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\reducer.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\actions.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\Categories.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Attribute\\Attribute.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\MediaCard.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\sagas.ts",["255"],"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { authApi } from '../../../services/api';\nimport { LoadingStatus } from '../../types';\nimport {\n    FetchSignInActionInterface,\n    AuthActionsType,\n    VerifyUserActionInterface,\n} from './contracts/types';\nimport {\n    setUserAuthStatus,\n    setUserData,\n    setUserLoadingStatus,\n    signInError,\n} from './actions';\n\nexport function* fetchSignInRequest({ payload }: FetchSignInActionInterface) {\n    try {\n        yield put(setUserLoadingStatus(LoadingStatus.LOADING));\n\n        const { data } = yield call(authApi.signIn, payload);\n        yield put(setUserData(data.user));\n        yield put(setUserAuthStatus(true));\n        /*     console.log(data); */\n        window.localStorage.setItem('token', `Bearer ${data.token}`);\n        /* yield put(setUserData(data)); */\n    } catch (error) {\n        yield put(setUserLoadingStatus(LoadingStatus.ERROR));\n        yield put(signInError());\n    }\n}\nexport function* verifyUser() {\n    try {\n        yield put(setUserLoadingStatus(LoadingStatus.LOADING));\n        const { data } = yield call(authApi.verify);\n        /*     console.log(data); */\n        yield put(setUserData(data.user));\n        yield put(setUserAuthStatus(true));\n    } catch (error) {\n        yield put(setUserLoadingStatus(LoadingStatus.ERROR));\n        yield put(signInError());\n    }\n}\nexport function* signOutUser() {\n    try {\n        yield put(setUserLoadingStatus(LoadingStatus.LOADING));\n        // yield call(authApi.signOut);\n        yield window.localStorage.clear();\n        yield put(setUserAuthStatus(false));\n    } catch (error) {\n        yield put(setUserLoadingStatus(LoadingStatus.ERROR));\n    }\n}\nexport function* authSaga() {\n    yield takeLatest(AuthActionsType.FETCH_SIGN_IN, fetchSignInRequest);\n    yield takeLatest(AuthActionsType.VERIFY_USER, verifyUser);\n    yield takeLatest(AuthActionsType.SIGN_OUT, signOutUser);\n}\n","D:\\web-dev\\react-crm\\admin\\src\\screens\\SignUp\\SignUp.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\GalleryEdit.tsx",["256"],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\contracts\\types.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\SideBar\\SideBar.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Categories\\DisplayCategories\\DisplayCategories.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\App.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\gallery\\sagas.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Gallery\\GalleryInModal\\GalleryInModal.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\helpers\\arrayFormating.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\category\\sagas.ts",[],["257","258"],"D:\\web-dev\\react-crm\\admin\\src\\store\\store.ts",[],["259","260"],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Home\\Home.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\types.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\UI-parts\\SuccessCheckBox.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\services\\api.js",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\UI-parts\\DepthSearchSelect.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\ducks\\auth\\selectors.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\SigIn\\SignIn.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\store\\saga.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\index.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTableHead.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTablePagination.tsx",[],"D:\\web-dev\\react-crm\\admin\\src\\components\\AttributeTable\\AttrTableBody.tsx",["261"],"import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useStyles } from './AttributeTable';\r\nimport { Link } from 'react-router-dom';\r\n//mui\r\nimport { TableBody, TableRow, TableCell, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n//store\r\nimport { RootState } from 'store/store';\r\nimport { setOpenAttributeEditPanel } from 'store/ducks/attribute/actions';\r\n\r\nexport const AttrTableBody: React.FC = () => {\r\n    const attrGroup = useSelector((state: RootState) => state.attribute.attr_group);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const openEditPanel = () => {\r\n        dispatch(setOpenAttributeEditPanel(true));\r\n    };\r\n    return (\r\n        <TableBody>\r\n            {attrGroup?.map((row) => (\r\n                <TableRow hover key={row._id}>\r\n                    <TableCell className={classes.cell} component=\"th\" scope=\"row\">\r\n                        <div>\r\n                            <IconButton\r\n                                aria-label=\"change\"\r\n                                color=\"primary\"\r\n                                component={Link}\r\n                                to={`attribute/edit-attribute/${row._id}`}>\r\n                                <CreateIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                aria-label=\"delete\"\r\n                                color=\"secondary\"\r\n                                onClick={(event) => {\r\n                                    event.stopPropagation();\r\n                                }}>\r\n                                <DeleteIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                            {row.name_user}\r\n                        </div>\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell} align=\"right\">\r\n                        {row.name_admin}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell} align=\"right\">\r\n                        {row.attribute.map((item) => (\r\n                            <p key={item.value}> {item.value}</p>\r\n                        ))}\r\n                        {/* <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        className={classes.addbtn}\r\n                                        startIcon={<AddCircleIcon />}>\r\n                                        Добавить атрибут\r\n                                    </Button> */}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell} align=\"right\">\r\n                        {row.show_in_filter ? 'Да' : 'Нет'}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell} align=\"right\">\r\n                        {row.unit_text ? row.unit_text : 'Не задано'}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cell} align=\"right\">\r\n                        {row.category ? row.category.name : 'Не задано'}\r\n                    </TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </TableBody>\r\n    );\r\n};\r\n","D:\\web-dev\\react-crm\\admin\\src\\helpers\\urlFormating.ts",[],["262","263"],"D:\\web-dev\\react-crm\\admin\\src\\helpers\\hooks.ts",[],"D:\\web-dev\\react-crm\\admin\\src\\screens\\Attribute\\EditAttribute.tsx",["264","265","266","267","268"],"import React, { ReactEventHandler, useEffect } from 'react';\r\n//mui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Grid,\r\n    makeStyles,\r\n    Paper,\r\n    TextField,\r\n    Typography,\r\n    FormControlLabel,\r\n    Checkbox,\r\n} from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\n\r\n//libs\r\nimport { useDispatch } from 'react-redux';\r\nimport slugify from 'slugify';\r\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\r\nimport { useParams, Prompt } from 'react-router-dom';\r\n//components\r\nimport { LoadingStatus } from 'store/types';\r\nimport { DepthSearchSelect } from 'components/UI-parts/DepthSearchSelect';\r\nimport { useAppSelector } from 'hooks/redux';\r\nimport { fetchCategoriesData } from 'store/ducks/category/actions';\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        paddingBottom: '15px',\r\n    },\r\n    wrapper: {\r\n        padding: '45px 26px',\r\n        height: '100%',\r\n    },\r\n    save_btn: {\r\n        position: 'fixed',\r\n        right: '20px',\r\n        top: '70px',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nexport const EditAttribute: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const categories = useAppSelector((state) => state.categories.categories);\r\n    const categoriesStatus = useAppSelector((state) => state.categories.status);\r\n    const {\r\n        handleSubmit,\r\n        setError,\r\n        setValue,\r\n        getValues,\r\n        control,\r\n        formState: { errors, isDirty },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name_admin: '',\r\n            name_user: '',\r\n            slug: '',\r\n            show_in_filter: false,\r\n            unit_text: '',\r\n            category: [],\r\n            attribute: [{ value: '', slug: '' }],\r\n        },\r\n    });\r\n    const { fields, append, remove } = useFieldArray({\r\n        control,\r\n        name: 'attribute',\r\n    });\r\n    useEffect(() => {\r\n        if (categoriesStatus === LoadingStatus.NEVER) {\r\n            dispatch(fetchCategoriesData());\r\n        }\r\n    }, [categoriesStatus, dispatch]);\r\n    //создание slug для атрибута из имени\r\n    const handleCreateSlugFromName = (e: React.SyntheticEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        const slug = slugify(getValues('name_admin'), { lower: true });\r\n        setValue('slug', slug, { shouldValidate: true });\r\n    };\r\n    //создание slug для значения атрибута из значения\r\n    const handleCreateSlugFromValue = (\r\n        e: React.SyntheticEvent<HTMLButtonElement>,\r\n        index: number\r\n    ) => {\r\n        e.preventDefault();\r\n        const attributeArr = getValues('attribute');\r\n        const slug = slugify(attributeArr[index].value, { lower: true });\r\n        attributeArr[index].slug = slug;\r\n        setValue('attribute', attributeArr, { shouldValidate: true });\r\n    };\r\n    //проверка не повторяется ли slug значения атрибута\r\n    const validateAsUniqSlugInAttribute = (value: string, index: number) => {\r\n        let flag = true;\r\n        const currentValues = getValues('attribute');\r\n        currentValues.forEach((item, iterationCount) => {\r\n            if (\r\n                item.slug.toLocaleLowerCase() === value.toLocaleLowerCase() &&\r\n                iterationCount !== index\r\n            ) {\r\n                flag = false;\r\n            }\r\n        });\r\n\r\n        return flag || 'slug должен быть уникальным';\r\n    };\r\n    //обработчик отправки данных\r\n    // const handleSubmit = () => {};\r\n    const onSubmit = (data: any) => console.log(data);\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Typography className={classes.title} variant=\"h4\">\r\n                    Новый атрибут\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        className={classes.save_btn}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        startIcon={<SaveIcon />}>\r\n                        Сохранить\r\n                    </Button>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={6}>\r\n                            <Paper className={classes.wrapper}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item lg={12}>\r\n                                        <Box pb={2}>\r\n                                            <Typography variant=\"body2\">\r\n                                                Имя создается для администратора, и видимо\r\n                                                только в админ панели. Значение должно\r\n                                                быть уникальным.\r\n                                            </Typography>\r\n                                        </Box>\r\n\r\n                                        <Controller\r\n                                            control={control}\r\n                                            name=\"name_admin\"\r\n                                            rules={{\r\n                                                required: {\r\n                                                    value: true,\r\n                                                    message:\r\n                                                        'Поле обязательно для заполнения',\r\n                                                },\r\n                                                minLength: {\r\n                                                    value: 3,\r\n                                                    message:\r\n                                                        'Имя должно быть длинее 3-х символов',\r\n                                                },\r\n                                            }}\r\n                                            render={({ field }) => (\r\n                                                <TextField\r\n                                                    error={!!errors.name_admin}\r\n                                                    helperText={\r\n                                                        errors.name_admin?.message\r\n                                                    }\r\n                                                    label=\"Имя атрибута в админ панели\"\r\n                                                    variant=\"outlined\"\r\n                                                    className={classes.input}\r\n                                                    onChange={(e) => field.onChange(e)}\r\n                                                    value={field.value}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item lg={12}>\r\n                                        <Box pb={2}>\r\n                                            <Typography variant=\"body2\">\r\n                                                Название группы атрибутов, которые будет\r\n                                                выводится в заголовках фильтров\r\n                                            </Typography>\r\n                                        </Box>\r\n\r\n                                        <Controller\r\n                                            control={control}\r\n                                            name=\"name_user\"\r\n                                            rules={{\r\n                                                required: {\r\n                                                    value: true,\r\n                                                    message:\r\n                                                        'Поле обязательно для заполнения',\r\n                                                },\r\n                                                minLength: {\r\n                                                    value: 3,\r\n                                                    message:\r\n                                                        'Имя должно быть длинее 3-х символов',\r\n                                                },\r\n                                            }}\r\n                                            render={({ field }) => (\r\n                                                <TextField\r\n                                                    error={!!errors.name_user}\r\n                                                    helperText={errors.name_user?.message}\r\n                                                    label=\"Имя атрибута для клиента\"\r\n                                                    variant=\"outlined\"\r\n                                                    className={classes.input}\r\n                                                    onChange={(e) => field.onChange(e)}\r\n                                                    value={field.value}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item lg={6}>\r\n                                        <Controller\r\n                                            control={control}\r\n                                            name=\"slug\"\r\n                                            rules={{\r\n                                                required: {\r\n                                                    value: true,\r\n                                                    message:\r\n                                                        'Поле обязательно для заполнения',\r\n                                                },\r\n                                                minLength: {\r\n                                                    value: 3,\r\n                                                    message:\r\n                                                        'Slug должен быть длинее 3-х символов',\r\n                                                },\r\n                                            }}\r\n                                            render={({ field }) => (\r\n                                                <TextField\r\n                                                    error={!!errors.slug}\r\n                                                    helperText={errors.slug?.message}\r\n                                                    label=\"Slug\"\r\n                                                    variant=\"outlined\"\r\n                                                    className={classes.input}\r\n                                                    onChange={(e) => field.onChange(e)}\r\n                                                    value={field.value}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item lg={6}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            onClick={handleCreateSlugFromName}>\r\n                                            Создать slug из имени в админ панели\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Controller\r\n                                            control={control}\r\n                                            name=\"category\"\r\n                                            render={({ field }) => (\r\n                                                <DepthSearchSelect\r\n                                                    options={categories}\r\n                                                    actionChipText=\"Выбрать категорию атрибута\"\r\n                                                    depthKey=\"children\"\r\n                                                    getOptionLabel={(option) =>\r\n                                                        option?.name\r\n                                                    }\r\n                                                    getOptionValue={(option) =>\r\n                                                        option?._id\r\n                                                    }\r\n                                                    onChange={(newValue) => {\r\n                                                        field.onChange(newValue);\r\n                                                    }}\r\n                                                    value={field.value}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Controller\r\n                                            control={control}\r\n                                            name=\"show_in_filter\"\r\n                                            render={({ field }) => (\r\n                                                <FormControlLabel\r\n                                                    value={field.value}\r\n                                                    onChange={(e) => field.onChange(e)}\r\n                                                    control={<Checkbox color=\"primary\" />}\r\n                                                    label=\" Показывать атрибут в панели фильтров, в\r\n                                                   каталоге магазина\"\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item lg={6}>\r\n                            <Paper className={classes.wrapper}>\r\n                                <Typography variant=\"h5\">Значения атрибута</Typography>\r\n                                <Box py={2}>\r\n                                    <Typography variant=\"body2\">\r\n                                        Единица измерения одного атрибута. Применяется ко\r\n                                        всем добавленным атрибутам\r\n                                    </Typography>\r\n                                </Box>\r\n\r\n                                <Controller\r\n                                    control={control}\r\n                                    name=\"unit_text\"\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            error={!!errors.unit_text}\r\n                                            helperText={errors.unit_text?.message}\r\n                                            label=\"Еденица измерения\"\r\n                                            variant=\"outlined\"\r\n                                            className={classes.input}\r\n                                            onChange={(e) => field.onChange(e)}\r\n                                            value={field.value}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                <Box py={2}>\r\n                                    {fields.map((item, index) => {\r\n                                        return (\r\n                                            <Grid container spacing={2} key={item.id}>\r\n                                                <Grid item xs={5}>\r\n                                                    <Controller\r\n                                                        control={control}\r\n                                                        name={\r\n                                                            `attribute.${index}.value` as const\r\n                                                        }\r\n                                                        rules={{\r\n                                                            required: {\r\n                                                                value: true,\r\n                                                                message:\r\n                                                                    'Поле обязательно для заполнения',\r\n                                                            },\r\n                                                        }}\r\n                                                        render={({\r\n                                                            field,\r\n                                                            fieldState,\r\n                                                        }) => (\r\n                                                            <TextField\r\n                                                                error={\r\n                                                                    !!errors?.attribute?.[\r\n                                                                        index\r\n                                                                    ]?.value\r\n                                                                }\r\n                                                                helperText={\r\n                                                                    fieldState.error\r\n                                                                        ?.message\r\n                                                                }\r\n                                                                className={classes.input}\r\n                                                                label=\"Значение\"\r\n                                                                variant=\"outlined\"\r\n                                                                onChange={(e) =>\r\n                                                                    field.onChange(e)\r\n                                                                }\r\n                                                                value={field.value}\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={5}>\r\n                                                    <Controller\r\n                                                        control={control}\r\n                                                        name={\r\n                                                            `attribute.${index}.slug` as const\r\n                                                        }\r\n                                                        rules={{\r\n                                                            required: {\r\n                                                                value: true,\r\n                                                                message:\r\n                                                                    'Поле обязательно для заполнения',\r\n                                                            },\r\n                                                            validate: (value) => {\r\n                                                                return validateAsUniqSlugInAttribute(\r\n                                                                    value,\r\n                                                                    index\r\n                                                                );\r\n                                                            },\r\n                                                        }}\r\n                                                        render={({\r\n                                                            field,\r\n                                                            fieldState,\r\n                                                        }) => (\r\n                                                            <TextField\r\n                                                                error={\r\n                                                                    !!errors?.attribute?.[\r\n                                                                        index\r\n                                                                    ]?.slug\r\n                                                                }\r\n                                                                helperText={\r\n                                                                    fieldState.error\r\n                                                                        ?.message\r\n                                                                }\r\n                                                                className={classes.input}\r\n                                                                label=\"Slug\"\r\n                                                                variant=\"outlined\"\r\n                                                                onChange={(e) =>\r\n                                                                    field.onChange(e)\r\n                                                                }\r\n                                                                value={field.value}\r\n                                                            />\r\n                                                        )}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={1}>\r\n                                                    <IconButton\r\n                                                        onClick={(e: any) => {\r\n                                                            handleCreateSlugFromValue(\r\n                                                                e,\r\n                                                                index\r\n                                                            );\r\n                                                        }}\r\n                                                        color=\"primary\"\r\n                                                        component=\"span\">\r\n                                                        <AutorenewIcon />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                                <Grid item xs={1}>\r\n                                                    <IconButton\r\n                                                        onClick={(e: any) => {\r\n                                                            e.preventDefault();\r\n                                                            remove(index);\r\n                                                        }}\r\n                                                        color=\"secondary\"\r\n                                                        component=\"span\">\r\n                                                        <RemoveCircleOutlineIcon />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        );\r\n                                    })}\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button\r\n                                        onClick={() =>\r\n                                            append({\r\n                                                value: '',\r\n                                                slug: '',\r\n                                            })\r\n                                        }\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        size=\"large\"\r\n                                        startIcon={<AddIcon />}>\r\n                                        Добавить значение\r\n                                    </Button>\r\n                                </Box>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n","D:\\web-dev\\react-crm\\admin\\src\\hooks\\redux.ts",[],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"269","replacedBy":"273"},{"ruleId":"271","replacedBy":"274"},{"ruleId":"269","replacedBy":"275"},{"ruleId":"271","replacedBy":"276"},{"ruleId":"269","replacedBy":"277"},{"ruleId":"271","replacedBy":"278"},{"ruleId":"269","replacedBy":"279"},{"ruleId":"271","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":19},{"ruleId":"281","severity":1,"message":"285","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"269","replacedBy":"286"},{"ruleId":"271","replacedBy":"287"},{"ruleId":"269","replacedBy":"288"},{"ruleId":"271","replacedBy":"289"},{"ruleId":"269","replacedBy":"290"},{"ruleId":"271","replacedBy":"291"},{"ruleId":"281","severity":1,"message":"292","line":7,"column":5,"nodeType":"283","messageId":"284","endLine":7,"endColumn":30},{"ruleId":"293","severity":1,"message":"294","line":96,"column":8,"nodeType":"295","endLine":96,"endColumn":20,"suggestions":"296"},{"ruleId":"269","replacedBy":"297"},{"ruleId":"271","replacedBy":"298"},{"ruleId":"269","replacedBy":"299"},{"ruleId":"271","replacedBy":"300"},{"ruleId":"281","severity":1,"message":"301","line":17,"column":11,"nodeType":"283","messageId":"284","endLine":17,"endColumn":24},{"ruleId":"269","replacedBy":"302"},{"ruleId":"271","replacedBy":"303"},{"ruleId":"281","severity":1,"message":"304","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":34},{"ruleId":"281","severity":1,"message":"305","line":24,"column":10,"nodeType":"283","messageId":"284","endLine":24,"endColumn":19},{"ruleId":"281","severity":1,"message":"306","line":24,"column":21,"nodeType":"283","messageId":"284","endLine":24,"endColumn":27},{"ruleId":"281","severity":1,"message":"307","line":55,"column":9,"nodeType":"283","messageId":"284","endLine":55,"endColumn":17},{"ruleId":"281","severity":1,"message":"308","line":59,"column":30,"nodeType":"283","messageId":"284","endLine":59,"endColumn":37},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],["309"],["310"],["309"],["310"],["309"],["310"],["309"],["310"],"@typescript-eslint/no-unused-vars","'Attribute' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.",["309"],["310"],["309"],["310"],["309"],["310"],"'VerifyUserActionInterface' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch', 'editParams.alt', and 'editParams.title'. Either include them or remove the dependency array.","ArrayExpression",["311"],["309"],["310"],["309"],["310"],"'openEditPanel' is assigned a value but never used.",["309"],["310"],"'ReactEventHandler' is defined but never used.","'useParams' is defined but never used.","'Prompt' is defined but never used.","'setError' is assigned a value but never used.","'isDirty' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"312","fix":"313"},"Update the dependencies array to be: [title, alt, editParams.alt, editParams.title, dispatch]",{"range":"314","text":"315"},[2913,2925],"[title, alt, editParams.alt, editParams.title, dispatch]"]